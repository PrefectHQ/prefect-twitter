{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"prefect-twitter","text":"<p>Prefect integrations for interacting with Twitter.</p>"},{"location":"#resources","title":"Resources","text":"<p>For more tips on how to use tasks and flows in a Collection, check out Using Collections!</p>"},{"location":"#installation","title":"Installation","text":"<p>Install <code>prefect-twitter</code> with <code>pip</code>:</p> <pre><code>pip install prefect-twitter\n</code></pre> <p>Requires an installation of Python 3.7+.</p> <p>We recommend using a Python virtual environment manager such as pipenv, conda or virtualenv.</p> <p>These tasks are designed to work with Prefect 2. For more information about how to use Prefect, please refer to the Prefect documentation.</p>"},{"location":"#write-and-run-a-flow","title":"Write and run a flow","text":"<p>Tweets an update with just text. <pre><code>from prefect import flow\nfrom prefect_twitter import TwitterCredentials\nfrom prefect_twitter.tweets import update_status\n\n@flow\ndef example_update_status_flow():\n    twitter_credentials = TwitterCredentials(\n        consumer_key=\"consumer_key\",\n        consumer_secret=\"consumer_secret\",\n        access_token=\"access_token\",\n        access_token_secret=\"access_token_secret\"\n    )\n    status_id = update_status(twitter_credentials, status=\"A Prefect Tweet!\")\n    return status_id\n\nexample_update_status_flow()\n</code></pre></p>"},{"location":"#feedback","title":"Feedback","text":"<p>If you encounter and bugs while using <code>prefect-twitter</code>, feel free to open an issue in the prefect-twitter repository.</p> <p>If you have any questions or issues while using <code>prefect-twitter</code>, you can find help in either the Prefect Discourse forum or the Prefect Slack community.</p> <p>Feel free to star or watch <code>prefect-twitter</code> for updates too!</p>"},{"location":"#development","title":"Development","text":""},{"location":"#contributing","title":"Contributing","text":"<p>If you'd like to help contribute to fix an issue or add a feature to <code>prefect-twitter</code>, please propose changes through a pull request from a fork of the repository.</p> <p>Here are the steps:</p> <ol> <li>Fork the repository</li> <li>Clone the forked repository</li> <li>Install the repository and its dependencies: <pre><code>pip install -e \".[dev]\"\n</code></pre></li> <li>Make desired changes</li> <li>Add tests</li> <li>Insert an entry to CHANGELOG.md</li> <li>Install <code>pre-commit</code> to perform quality checks prior to commit: <code>pre-commit install</code></li> <li><code>git commit</code>, <code>git push</code>, and create a pull request</li> </ol>"},{"location":"blocks_catalog/","title":"Blocks Catalog","text":"<p>Below is a list of Blocks available for registration in <code>prefect-twitter</code>.</p> <p>To register blocks in this module to view and edit them on Prefect Cloud, first install the required packages, then <pre><code>prefect block register -m prefect_twitter\n</code></pre> Note, to use the <code>load</code> method on Blocks, you must already have a block document saved through code or saved through the UI.</p>"},{"location":"blocks_catalog/#credentials-module","title":"Credentials Module","text":"<p>TwitterCredentials</p> <p>Block used to manage Twitter authentication with tweepy. See Authentication Tokens section of the Keys and Tokens tab of your app, under the Twitter Developer Portal Projects &amp; Apps page at https://developer.twitter.com/en/portal/projects-and-apps.</p> <p>To load the TwitterCredentials: <pre><code>from prefect import flow\nfrom prefect_twitter.credentials import TwitterCredentials\n\n@flow\ndef my_flow():\n    my_block = TwitterCredentials.load(\"MY_BLOCK_NAME\")\n\nmy_flow()\n</code></pre> For additional examples, check out the Credentials Module under Examples Catalog.</p>"},{"location":"credentials/","title":"Credentials","text":"<p>Credential classes used to perform authenticated interactions with Twitter</p>"},{"location":"credentials/#prefect_twitter.credentials.TwitterCredentials","title":"<code>TwitterCredentials</code>","text":"<p>             Bases: <code>Block</code></p> <p>Block used to manage Twitter authentication with tweepy. See Authentication Tokens section of the Keys and Tokens tab of your app, under the Twitter Developer Portal Projects &amp; Apps page at https://developer.twitter.com/en/portal/projects-and-apps.</p> <p>Attributes:</p> Name Type Description <code>consumer_key</code> <code>str</code> <p>This is also known as oauth_consumer_key or API key.</p> <code>consumer_secret</code> <code>SecretStr</code> <p>This is also known as oauth_consumer_secret or API secret key.</p> <code>access_token</code> <code>str</code> <p>This is also known as oauth_token.</p> <code>access_token_secret</code> <code>SecretStr</code> <p>This is also known as oauth_token_secret.</p> Example <p>Load stored Twitter credentials: <pre><code>from prefect_twitter import TwitterCredentials\ntwitter_credentials_block = TwitterCredentials.load(\"BLOCK_NAME\")\n</code></pre></p> Source code in <code>prefect_twitter/credentials.py</code> <pre><code>class TwitterCredentials(Block):\n    \"\"\"\n    Block used to manage Twitter authentication with tweepy.\n    See Authentication Tokens section of the Keys and Tokens tab of\n    your app, under the Twitter Developer Portal Projects &amp; Apps page at\n    https://developer.twitter.com/en/portal/projects-and-apps.\n\n    Attributes:\n        consumer_key: This is also known as oauth_consumer_key or API key.\n        consumer_secret: This is also known as oauth_consumer_secret or API secret key.\n        access_token: This is also known as oauth_token.\n        access_token_secret: This is also known as oauth_token_secret.\n\n    Example:\n        Load stored Twitter credentials:\n        ```python\n        from prefect_twitter import TwitterCredentials\n        twitter_credentials_block = TwitterCredentials.load(\"BLOCK_NAME\")\n        ```\n    \"\"\"  # noqa E501\n\n    _block_type_name = \"Twitter Credentials\"\n    _logo_url = \"https://cdn.sanity.io/images/3ugk85nk/production/747aa724fedcefd1c1cec248ab7a5b518a1191cd-250x250.png\"  # noqa\n    _documentation_url = \"https://prefecthq.github.io/prefect-twitter/credentials/#prefect_twitter.credentials.TwitterCredentials\"  # noqa\n\n    consumer_key: str = Field(\n        ..., description=\"Twitter App API key used for authentication.\"\n    )\n    consumer_secret: SecretStr = Field(\n        ..., description=\"Twitter App API secret used for authentication.\"\n    )\n    access_token: str = Field(\n        ..., description=\"Oauth token used to access the Twitter API.\"\n    )\n    access_token_secret: SecretStr = Field(\n        ..., description=\"Ouath secret used to access the Twitter API.\"\n    )\n\n    def get_api(self) -&gt; API:\n        \"\"\"\n        Gets an authenticated Tweepy API.\n\n        Returns:\n            An authenticated Tweepy API.\n\n        Example:\n            Gets a Tweepy API using consumer and access pairs.\n            ```python\n            from prefect import flow\n            from prefect_twitter import TwitterCredentials\n\n            @flow\n            def example_get_api_flow():\n                consumer_key = \"consumer_key\"\n                consumer_secret = \"consumer_secret\"\n                access_token = \"access_token\"\n                access_token_secret = \"access_token_secret\"\n                twitter_credentials = TwitterCredentials(\n                    consumer_key,\n                    consumer_secret,\n                    access_token,\n                    access_token_secret\n                )\n                api = twitter_credentials.get_api()\n                return api\n\n            example_get_api_flow()\n            ```\n        \"\"\"\n        auth = OAuth1UserHandler(\n            self.consumer_key,\n            self.consumer_secret.get_secret_value(),\n            self.access_token,\n            self.access_token_secret.get_secret_value(),\n        )\n        api = API(auth=auth)\n        return api\n</code></pre>"},{"location":"credentials/#prefect_twitter.credentials.TwitterCredentials.get_api","title":"<code>get_api()</code>","text":"<p>Gets an authenticated Tweepy API.</p> <p>Returns:</p> Type Description <code>API</code> <p>An authenticated Tweepy API.</p> Example <p>Gets a Tweepy API using consumer and access pairs. <pre><code>from prefect import flow\nfrom prefect_twitter import TwitterCredentials\n\n@flow\ndef example_get_api_flow():\n    consumer_key = \"consumer_key\"\n    consumer_secret = \"consumer_secret\"\n    access_token = \"access_token\"\n    access_token_secret = \"access_token_secret\"\n    twitter_credentials = TwitterCredentials(\n        consumer_key,\n        consumer_secret,\n        access_token,\n        access_token_secret\n    )\n    api = twitter_credentials.get_api()\n    return api\n\nexample_get_api_flow()\n</code></pre></p> Source code in <code>prefect_twitter/credentials.py</code> <pre><code>def get_api(self) -&gt; API:\n    \"\"\"\n    Gets an authenticated Tweepy API.\n\n    Returns:\n        An authenticated Tweepy API.\n\n    Example:\n        Gets a Tweepy API using consumer and access pairs.\n        ```python\n        from prefect import flow\n        from prefect_twitter import TwitterCredentials\n\n        @flow\n        def example_get_api_flow():\n            consumer_key = \"consumer_key\"\n            consumer_secret = \"consumer_secret\"\n            access_token = \"access_token\"\n            access_token_secret = \"access_token_secret\"\n            twitter_credentials = TwitterCredentials(\n                consumer_key,\n                consumer_secret,\n                access_token,\n                access_token_secret\n            )\n            api = twitter_credentials.get_api()\n            return api\n\n        example_get_api_flow()\n        ```\n    \"\"\"\n    auth = OAuth1UserHandler(\n        self.consumer_key,\n        self.consumer_secret.get_secret_value(),\n        self.access_token,\n        self.access_token_secret.get_secret_value(),\n    )\n    api = API(auth=auth)\n    return api\n</code></pre>"},{"location":"examples_catalog/","title":"Examples Catalog","text":"<p>Below is a list of examples for <code>prefect-twitter</code>.</p>"},{"location":"examples_catalog/#credentials-module","title":"Credentials Module","text":"<p>Gets a Tweepy API using consumer and access pairs. <pre><code>from prefect import flow\nfrom prefect_twitter import TwitterCredentials\n\n@flow\ndef example_get_api_flow():\n    consumer_key = \"consumer_key\"\n    consumer_secret = \"consumer_secret\"\n    access_token = \"access_token\"\n    access_token_secret = \"access_token_secret\"\n    twitter_credentials = TwitterCredentials(\n        consumer_key,\n        consumer_secret,\n        access_token,\n        access_token_secret\n    )\n    api = twitter_credentials.get_api()\n    return api\n\nexample_get_api_flow()\n</code></pre></p>"},{"location":"media/","title":"Media","text":"<p>This is a module for interacting with Twitter media</p>"},{"location":"media/#prefect_twitter.media.get_media_upload_status","title":"<code>get_media_upload_status(media_id, twitter_credentials)</code>  <code>async</code>","text":"<p>Check on the progress of a chunked media upload. If the upload has succeeded, it's safe to create a Tweet with this media_id.</p> <p>Parameters:</p> Name Type Description Default <code>media_id</code> <code>int</code> <p>The ID of the media to check.</p> required <code>twitter_credentials</code> <code>TwitterCredentials</code> <p>Credentials to use for authentication with Twitter.</p> required <p>Returns:</p> Type Description <code>Media</code> <p>The Media object.</p> Example <p>Tweets an update with just text. <pre><code>from prefect import flow\nfrom prefect_twitter import TwitterCredentials\nfrom prefect_twitter.media import get_media_upload_status\n\n@flow\ndef example_get_media_upload_status_flow():\n    twitter_credentials = TwitterCredentials(\n        consumer_key=consumer_key,\n        consumer_secret=consumer_secret,\n        access_token=access_token,\n        access_token_secret=access_token_secret\n    )\n    media_id = 1443668738906234883\n    media = get_media_upload_status(media_id, twitter_credentials)\n    return media\n\nexample_get_media_upload_status_flow()\n</code></pre></p> Source code in <code>prefect_twitter/media.py</code> <pre><code>@task\nasync def get_media_upload_status(\n    media_id: int, twitter_credentials: \"TwitterCredentials\"\n) -&gt; \"Media\":\n    \"\"\"\n    Check on the progress of a chunked media upload. If the upload has succeeded,\n    it's safe to create a Tweet with this media_id.\n\n    Args:\n        media_id: The ID of the media to check.\n        twitter_credentials: Credentials to use for authentication with Twitter.\n\n    Returns:\n        The Media object.\n\n    Example:\n        Tweets an update with just text.\n        ```python\n        from prefect import flow\n        from prefect_twitter import TwitterCredentials\n        from prefect_twitter.media import get_media_upload_status\n\n        @flow\n        def example_get_media_upload_status_flow():\n            twitter_credentials = TwitterCredentials(\n                consumer_key=consumer_key,\n                consumer_secret=consumer_secret,\n                access_token=access_token,\n                access_token_secret=access_token_secret\n            )\n            media_id = 1443668738906234883\n            media = get_media_upload_status(media_id, twitter_credentials)\n            return media\n\n        example_get_media_upload_status_flow()\n        ```\n    \"\"\"\n    api = twitter_credentials.get_api()\n    partial_get = partial(api.get_media_upload_status, media_id)\n    media = await to_thread.run_sync(partial_get)\n    return media\n</code></pre>"},{"location":"media/#prefect_twitter.media.media_upload","title":"<code>media_upload(filename, twitter_credentials, file=None, chunked=False, **kwargs)</code>  <code>async</code>","text":"<p>Uploads media to Twitter. Chunked media upload is automatically used for videos.</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <code>Union[Path, str]</code> <p>The filename of the image to upload. This field is used for MIME type detection.</p> required <code>twitter_credentials</code> <code>TwitterCredentials</code> <p>Credentials to use for authentication with Twitter.</p> required <code>file</code> <code>Optional[IOBase]</code> <p>A file object to upload. If not specified, this task will attempt to locate and upload a file with the name specified in filename.</p> <code>None</code> <code>chunked</code> <code>bool</code> <p>Whether or not to use chunked media upload. Videos use chunked upload regardless of this parameter.</p> <code>False</code> <code>kwargs</code> <code>dict</code> <p>Additional keyword arguments to pass to media_upload.</p> <code>{}</code> Example <p>Uploads an image from a file path to Twitter. <pre><code>from prefect import flow\nfrom prefect_twitter import TwitterCredentials\nfrom prefect_twitter.media import media_upload\n\n@flow\ndef example_media_upload_flow():\n    twitter_credentials = TwitterCredentials(\n        consumer_key=\"consumer_key\",\n        consumer_secret=\"consumer_secret\",\n        access_token=\"access_token\",\n        access_token_secret=\"access_token_secret\"\n    )\n    media_id = media_upload(\"/path/to/prefection.jpg\", twitter_credentials)\n    return media_id\n\nexample_media_upload_flow()\n</code></pre></p> Source code in <code>prefect_twitter/media.py</code> <pre><code>@task\nasync def media_upload(\n    filename: Union[Path, str],\n    twitter_credentials: \"TwitterCredentials\",\n    file: Optional[\"IOBase\"] = None,\n    chunked: bool = False,\n    **kwargs: dict\n) -&gt; int:\n    \"\"\"\n    Uploads media to Twitter. Chunked media upload\n    is automatically used for videos.\n\n    Args:\n        filename: The filename of the image to upload.\n            This field is used for MIME type detection.\n        twitter_credentials: Credentials to use for authentication with Twitter.\n        file: A file object to upload. If not specified, this task will attempt to\n            locate and upload a file with the name specified in filename.\n        chunked: Whether or not to use chunked media upload.\n            Videos use chunked upload regardless of this parameter.\n        kwargs: Additional keyword arguments to pass to\n            [media_upload](https://docs.tweepy.org/en/stable/api.html#tweepy.API.media_upload).\n    Returns:\n        The media ID.\n\n    Example:\n        Uploads an image from a file path to Twitter.\n        ```python\n        from prefect import flow\n        from prefect_twitter import TwitterCredentials\n        from prefect_twitter.media import media_upload\n\n        @flow\n        def example_media_upload_flow():\n            twitter_credentials = TwitterCredentials(\n                consumer_key=\"consumer_key\",\n                consumer_secret=\"consumer_secret\",\n                access_token=\"access_token\",\n                access_token_secret=\"access_token_secret\"\n            )\n            media_id = media_upload(\"/path/to/prefection.jpg\", twitter_credentials)\n            return media_id\n\n        example_media_upload_flow()\n        ```\n    \"\"\"  # noqa\n    logger = get_run_logger()\n    logger.info(\"Uploading media named %s\", filename)\n\n    api = twitter_credentials.get_api()\n    partial_media = partial(\n        api.media_upload, filename=filename, file=file, chunked=chunked, **kwargs\n    )\n    media = await to_thread.run_sync(partial_media)\n    media_id = media.media_id\n    return media_id\n</code></pre>"},{"location":"tweets/","title":"Tweets","text":"<p>This is a module for interacting with Twitter tweets</p>"},{"location":"tweets/#prefect_twitter.tweets.get_status","title":"<code>get_status(status_id, twitter_credentials, **kwargs)</code>  <code>async</code>","text":"<p>Returns a single status specified by the ID parameter.</p> <p>Parameters:</p> Name Type Description Default <code>status_id</code> <code>int</code> <p>The ID of the status.</p> required <code>twitter_credentials</code> <code>TwitterCredentials</code> <p>Credentials to use for authentication with Twitter.</p> required <code>kwargs</code> <code>dict</code> <p>Additional keyword arguments to pass to get_status.</p> <code>{}</code> Example <p>Tweets an update with just text. <pre><code>from prefect import flow\nfrom prefect_twitter import TwitterCredentials\nfrom prefect_twitter.tweets import get_status\n\n@flow\ndef example_get_status_flow():\n    twitter_credentials = TwitterCredentials(\n        consumer_key=consumer_key,\n        consumer_secret=consumer_secret,\n        access_token=access_token,\n        access_token_secret=access_token_secret\n    )\n    status_id = 1504591031626571777\n    status = get_status(status_id, twitter_credentials)\n    return status\n\nexample_get_status_flow()\n</code></pre></p> Source code in <code>prefect_twitter/tweets.py</code> <pre><code>@task\nasync def get_status(\n    status_id: int, twitter_credentials: \"TwitterCredentials\", **kwargs: dict\n) -&gt; \"Status\":\n    \"\"\"\n    Returns a single status specified by the ID parameter.\n\n    Args:\n        status_id: The ID of the status.\n        twitter_credentials: Credentials to use for authentication with Twitter.\n        kwargs: Additional keyword arguments to pass to\n            [get_status](https://docs.tweepy.org/en/stable/api.html#tweepy.API.get_status).\n    Returns:\n        The Status object.\n\n    Example:\n        Tweets an update with just text.\n        ```python\n        from prefect import flow\n        from prefect_twitter import TwitterCredentials\n        from prefect_twitter.tweets import get_status\n\n        @flow\n        def example_get_status_flow():\n            twitter_credentials = TwitterCredentials(\n                consumer_key=consumer_key,\n                consumer_secret=consumer_secret,\n                access_token=access_token,\n                access_token_secret=access_token_secret\n            )\n            status_id = 1504591031626571777\n            status = get_status(status_id, twitter_credentials)\n            return status\n\n        example_get_status_flow()\n        ```\n    \"\"\"\n    api = twitter_credentials.get_api()\n    partial_get = partial(api.get_status, status_id, **kwargs)\n    status = await to_thread.run_sync(partial_get)\n    return status\n</code></pre>"},{"location":"tweets/#prefect_twitter.tweets.update_status","title":"<code>update_status(twitter_credentials, status=None, media_ids=None, **kwargs)</code>  <code>async</code>","text":"<p>Updates the authenticating user's current status, also known as Tweeting.</p> <p>Parameters:</p> Name Type Description Default <code>twitter_credentials</code> <code>TwitterCredentials</code> <p>Credentials to use for authentication with Twitter.</p> required <code>status</code> <code>Optional[str]</code> <p>Text of the Tweet being created. This field is required if media_ids is not present.</p> <code>None</code> <code>media_ids</code> <code>Optional[List[Union[int, str]]]</code> <p>A list of Media IDs being attached to the Tweet.</p> <code>None</code> <code>kwargs</code> <code>dict</code> <p>Additional keyword arguments to pass to update_status.</p> <code>{}</code> Example <p>Tweets an update with just text. <pre><code>from prefect import flow\nfrom prefect_twitter import TwitterCredentials\nfrom prefect_twitter.tweets import update_status\n\n@flow\ndef example_update_status_flow():\n    twitter_credentials = TwitterCredentials(\n        consumer_key=\"consumer_key\",\n        consumer_secret=\"consumer_secret\",\n        access_token=\"access_token\",\n        access_token_secret=\"access_token_secret\"\n    )\n    status_id = update_status(twitter_credentials, status=\"A Prefect Tweet!\")\n    return status_id\n\nexample_update_status_flow()\n</code></pre></p> <p>Tweets an update with text and a media. <pre><code>from prefect import flow\nfrom prefect_twitter import TwitterCredentials\nfrom prefect_twitter.tweets import update_status\nfrom prefect_twitter.media import media_upload\n\n@flow\ndef example_update_status_flow():\n    twitter_credentials = TwitterCredentials(\n        consumer_key=\"consumer_key\",\n        consumer_secret=\"consumer_secret\",\n        access_token=\"access_token\",\n        access_token_secret=\"access_token_secret\"\n    )\n    media_id = media_upload(\"prefect.png\", twitter_credentials)\n    status_id = update_status(\n        twitter_credentials,\n        status=\"Prefect!\",\n        media_ids=[media_id]\n    )\n    return status_id\n\nexample_update_status_flow()\n</code></pre></p> Source code in <code>prefect_twitter/tweets.py</code> <pre><code>@task\nasync def update_status(\n    twitter_credentials: \"TwitterCredentials\",\n    status: Optional[str] = None,\n    media_ids: Optional[List[Union[int, str]]] = None,\n    **kwargs: dict\n) -&gt; int:\n    \"\"\"\n    Updates the authenticating user's current status, also known as Tweeting.\n\n    Args:\n        twitter_credentials: Credentials to use for authentication with Twitter.\n        status: Text of the Tweet being created. This field is required\n            if media_ids is not present.\n        media_ids: A list of Media IDs being attached to the Tweet.\n        kwargs: Additional keyword arguments to pass to\n            [update_status](https://docs.tweepy.org/en/stable/api.html#tweepy.API.update_status).\n    Returns:\n        The status ID.\n\n    Example:\n        Tweets an update with just text.\n        ```python\n        from prefect import flow\n        from prefect_twitter import TwitterCredentials\n        from prefect_twitter.tweets import update_status\n\n        @flow\n        def example_update_status_flow():\n            twitter_credentials = TwitterCredentials(\n                consumer_key=\"consumer_key\",\n                consumer_secret=\"consumer_secret\",\n                access_token=\"access_token\",\n                access_token_secret=\"access_token_secret\"\n            )\n            status_id = update_status(twitter_credentials, status=\"A Prefect Tweet!\")\n            return status_id\n\n        example_update_status_flow()\n        ```\n\n        Tweets an update with text and a media.\n        ```python\n        from prefect import flow\n        from prefect_twitter import TwitterCredentials\n        from prefect_twitter.tweets import update_status\n        from prefect_twitter.media import media_upload\n\n        @flow\n        def example_update_status_flow():\n            twitter_credentials = TwitterCredentials(\n                consumer_key=\"consumer_key\",\n                consumer_secret=\"consumer_secret\",\n                access_token=\"access_token\",\n                access_token_secret=\"access_token_secret\"\n            )\n            media_id = media_upload(\"prefect.png\", twitter_credentials)\n            status_id = update_status(\n                twitter_credentials,\n                status=\"Prefect!\",\n                media_ids=[media_id]\n            )\n            return status_id\n\n        example_update_status_flow()\n        ```\n    \"\"\"  # noqa\n    num_media = len(media_ids) if media_ids else 0\n    logger = get_run_logger()\n    logger.info(\"Updating status with %s media.\", num_media)\n\n    if not status and not media_ids:  # `not` checks for None and []\n        raise ValueError(\"One of text or media_ids must be provided\")\n\n    api = twitter_credentials.get_api()\n    partial_update = partial(\n        api.update_status, status=status, media_ids=media_ids, **kwargs\n    )\n    status = await to_thread.run_sync(partial_update)\n    return status.id\n</code></pre>"}]}