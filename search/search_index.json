{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"prefect-twitter Welcome! Prefect integrations for interacting with Twitter. Getting Started Python setup Requires an installation of Python 3.7+. We recommend using a Python virtual environment manager such as pipenv, conda or virtualenv. These tasks are designed to work with Prefect 2.0. For more information about how to use Prefect, please refer to the Prefect documentation . Installation Install prefect-twitter with pip : pip install prefect-twitter Write and run a flow Tweets an update with just text. from prefect import flow from prefect_twitter import TwitterCredentials from prefect_twitter.tweets import update_status @flow def example_update_status_flow (): twitter_credentials = TwitterCredentials ( consumer_key = \"consumer_key\" , consumer_secret = \"consumer_secret\" , access_token = \"access_token\" , access_token_secret = \"access_token_secret\" ) status_id = update_status ( twitter_credentials , status = \"A Prefect Tweet!\" ) return status_id example_update_status_flow () Resources If you encounter and bugs while using prefect-twitter , feel free to open an issue in the prefect-twitter repository. If you have any questions or issues while using prefect-twitter , you can find help in either the Prefect Discourse forum or the Prefect Slack community . Development If you'd like to install a version of prefect-twitter for development, clone the repository and perform an editable install with pip : git clone https://github.com/PrefectHQ/prefect-twitter.git cd prefect-twitter/ pip install -e \".[dev]\" # Install linting pre-commit hooks pre-commit install","title":"Home"},{"location":"#prefect-twitter","text":"","title":"prefect-twitter"},{"location":"#welcome","text":"Prefect integrations for interacting with Twitter.","title":"Welcome!"},{"location":"#getting-started","text":"","title":"Getting Started"},{"location":"#python-setup","text":"Requires an installation of Python 3.7+. We recommend using a Python virtual environment manager such as pipenv, conda or virtualenv. These tasks are designed to work with Prefect 2.0. For more information about how to use Prefect, please refer to the Prefect documentation .","title":"Python setup"},{"location":"#installation","text":"Install prefect-twitter with pip : pip install prefect-twitter","title":"Installation"},{"location":"#write-and-run-a-flow","text":"Tweets an update with just text. from prefect import flow from prefect_twitter import TwitterCredentials from prefect_twitter.tweets import update_status @flow def example_update_status_flow (): twitter_credentials = TwitterCredentials ( consumer_key = \"consumer_key\" , consumer_secret = \"consumer_secret\" , access_token = \"access_token\" , access_token_secret = \"access_token_secret\" ) status_id = update_status ( twitter_credentials , status = \"A Prefect Tweet!\" ) return status_id example_update_status_flow ()","title":"Write and run a flow"},{"location":"#resources","text":"If you encounter and bugs while using prefect-twitter , feel free to open an issue in the prefect-twitter repository. If you have any questions or issues while using prefect-twitter , you can find help in either the Prefect Discourse forum or the Prefect Slack community .","title":"Resources"},{"location":"#development","text":"If you'd like to install a version of prefect-twitter for development, clone the repository and perform an editable install with pip : git clone https://github.com/PrefectHQ/prefect-twitter.git cd prefect-twitter/ pip install -e \".[dev]\" # Install linting pre-commit hooks pre-commit install","title":"Development"},{"location":"credentials/","text":"prefect_twitter.credentials Credential classes used to perform authenticated interactions with Twitter TwitterCredentials dataclass Dataclass used to manage Twitter authentication with tweepy. See Authentication Tokens section of the Keys and Tokens tab of your app, under the Twitter Developer Portal Projects & Apps page at https://developer.twitter.com/en/portal/projects-and-apps. Parameters: Name Type Description Default consumer_key str also known as oauth_consumer_key or API key required consumer_secret str also known as oauth_consumer_secret or API secret key required access_token str also known as oauth_token required access_token_secret str also known as oauth_token_secret required Source code in prefect_twitter/credentials.py class TwitterCredentials : \"\"\" Dataclass used to manage Twitter authentication with tweepy. See Authentication Tokens section of the Keys and Tokens tab of your app, under the Twitter Developer Portal Projects & Apps page at https://developer.twitter.com/en/portal/projects-and-apps. Args: consumer_key: also known as oauth_consumer_key or API key consumer_secret: also known as oauth_consumer_secret or API secret key access_token: also known as oauth_token access_token_secret: also known as oauth_token_secret \"\"\" consumer_key : str consumer_secret : str access_token : str access_token_secret : str def get_api ( self ) -> API : \"\"\" Gets an authenticated Tweepy API. Returns: An authenticated Tweepy API. Example: Gets a Tweepy API using consumer and access pairs. ```python from prefect import flow from prefect_twitter import TwitterCredentials @flow def example_get_api_flow(): consumer_key = \"consumer_key\" consumer_secret = \"consumer_secret\" access_token = \"access_token\" access_token_secret = \"access_token_secret\" twitter_credentials = TwitterCredentials( consumer_key, consumer_secret, access_token, access_token_secret ) api = twitter_credentials.get_api() return api example_get_api_flow() ``` \"\"\" auth = OAuth1UserHandler ( self . consumer_key , self . consumer_secret , self . access_token , self . access_token_secret , ) api = API ( auth = auth ) return api get_api Gets an authenticated Tweepy API. Returns: Type Description API An authenticated Tweepy API. Examples: Gets a Tweepy API using consumer and access pairs. from prefect import flow from prefect_twitter import TwitterCredentials @flow def example_get_api_flow (): consumer_key = \"consumer_key\" consumer_secret = \"consumer_secret\" access_token = \"access_token\" access_token_secret = \"access_token_secret\" twitter_credentials = TwitterCredentials ( consumer_key , consumer_secret , access_token , access_token_secret ) api = twitter_credentials . get_api () return api example_get_api_flow () Source code in prefect_twitter/credentials.py def get_api ( self ) -> API : \"\"\" Gets an authenticated Tweepy API. Returns: An authenticated Tweepy API. Example: Gets a Tweepy API using consumer and access pairs. ```python from prefect import flow from prefect_twitter import TwitterCredentials @flow def example_get_api_flow(): consumer_key = \"consumer_key\" consumer_secret = \"consumer_secret\" access_token = \"access_token\" access_token_secret = \"access_token_secret\" twitter_credentials = TwitterCredentials( consumer_key, consumer_secret, access_token, access_token_secret ) api = twitter_credentials.get_api() return api example_get_api_flow() ``` \"\"\" auth = OAuth1UserHandler ( self . consumer_key , self . consumer_secret , self . access_token , self . access_token_secret , ) api = API ( auth = auth ) return api","title":"Credentials"},{"location":"credentials/#prefect_twitter.credentials","text":"Credential classes used to perform authenticated interactions with Twitter","title":"credentials"},{"location":"credentials/#prefect_twitter.credentials.TwitterCredentials","text":"Dataclass used to manage Twitter authentication with tweepy. See Authentication Tokens section of the Keys and Tokens tab of your app, under the Twitter Developer Portal Projects & Apps page at https://developer.twitter.com/en/portal/projects-and-apps. Parameters: Name Type Description Default consumer_key str also known as oauth_consumer_key or API key required consumer_secret str also known as oauth_consumer_secret or API secret key required access_token str also known as oauth_token required access_token_secret str also known as oauth_token_secret required Source code in prefect_twitter/credentials.py class TwitterCredentials : \"\"\" Dataclass used to manage Twitter authentication with tweepy. See Authentication Tokens section of the Keys and Tokens tab of your app, under the Twitter Developer Portal Projects & Apps page at https://developer.twitter.com/en/portal/projects-and-apps. Args: consumer_key: also known as oauth_consumer_key or API key consumer_secret: also known as oauth_consumer_secret or API secret key access_token: also known as oauth_token access_token_secret: also known as oauth_token_secret \"\"\" consumer_key : str consumer_secret : str access_token : str access_token_secret : str def get_api ( self ) -> API : \"\"\" Gets an authenticated Tweepy API. Returns: An authenticated Tweepy API. Example: Gets a Tweepy API using consumer and access pairs. ```python from prefect import flow from prefect_twitter import TwitterCredentials @flow def example_get_api_flow(): consumer_key = \"consumer_key\" consumer_secret = \"consumer_secret\" access_token = \"access_token\" access_token_secret = \"access_token_secret\" twitter_credentials = TwitterCredentials( consumer_key, consumer_secret, access_token, access_token_secret ) api = twitter_credentials.get_api() return api example_get_api_flow() ``` \"\"\" auth = OAuth1UserHandler ( self . consumer_key , self . consumer_secret , self . access_token , self . access_token_secret , ) api = API ( auth = auth ) return api","title":"TwitterCredentials"},{"location":"credentials/#prefect_twitter.credentials.TwitterCredentials.get_api","text":"Gets an authenticated Tweepy API. Returns: Type Description API An authenticated Tweepy API. Examples: Gets a Tweepy API using consumer and access pairs. from prefect import flow from prefect_twitter import TwitterCredentials @flow def example_get_api_flow (): consumer_key = \"consumer_key\" consumer_secret = \"consumer_secret\" access_token = \"access_token\" access_token_secret = \"access_token_secret\" twitter_credentials = TwitterCredentials ( consumer_key , consumer_secret , access_token , access_token_secret ) api = twitter_credentials . get_api () return api example_get_api_flow () Source code in prefect_twitter/credentials.py def get_api ( self ) -> API : \"\"\" Gets an authenticated Tweepy API. Returns: An authenticated Tweepy API. Example: Gets a Tweepy API using consumer and access pairs. ```python from prefect import flow from prefect_twitter import TwitterCredentials @flow def example_get_api_flow(): consumer_key = \"consumer_key\" consumer_secret = \"consumer_secret\" access_token = \"access_token\" access_token_secret = \"access_token_secret\" twitter_credentials = TwitterCredentials( consumer_key, consumer_secret, access_token, access_token_secret ) api = twitter_credentials.get_api() return api example_get_api_flow() ``` \"\"\" auth = OAuth1UserHandler ( self . consumer_key , self . consumer_secret , self . access_token , self . access_token_secret , ) api = API ( auth = auth ) return api","title":"get_api()"},{"location":"media/","text":"prefect_twitter.media This is a module for interacting with Twitter media get_media_upload_status async Check on the progress of a chunked media upload. If the upload has succeeded, it's safe to create a Tweet with this media_id. Parameters: Name Type Description Default media_id int The ID of the media to check. required twitter_credentials TwitterCredentials Credentials to use for authentication with Twitter. required Returns: Type Description Media The Media object. Examples: Tweets an update with just text. from prefect import flow from prefect_twitter import TwitterCredentials from prefect_twitter.media import get_media_upload_status @flow def example_get_media_upload_status_flow (): twitter_credentials = TwitterCredentials ( consumer_key = consumer_key , consumer_secret = consumer_secret , access_token = access_token , access_token_secret = access_token_secret ) media_id = 1443668738906234883 media = get_media_upload_status ( media_id , twitter_credentials ) return media example_get_media_upload_status_flow () Source code in prefect_twitter/media.py @task async def get_media_upload_status ( media_id : int , twitter_credentials : \"TwitterCredentials\" ) -> \"Media\" : \"\"\" Check on the progress of a chunked media upload. If the upload has succeeded, it's safe to create a Tweet with this media_id. Args: media_id: The ID of the media to check. twitter_credentials: Credentials to use for authentication with Twitter. Returns: The Media object. Example: Tweets an update with just text. ```python from prefect import flow from prefect_twitter import TwitterCredentials from prefect_twitter.media import get_media_upload_status @flow def example_get_media_upload_status_flow(): twitter_credentials = TwitterCredentials( consumer_key=consumer_key, consumer_secret=consumer_secret, access_token=access_token, access_token_secret=access_token_secret ) media_id = 1443668738906234883 media = get_media_upload_status(media_id, twitter_credentials) return media example_get_media_upload_status_flow() ``` \"\"\" api = twitter_credentials . get_api () partial_get = partial ( api . get_media_upload_status , media_id ) media = await to_thread . run_sync ( partial_get ) return media media_upload async Uploads media to Twitter. Chunked media upload is automatically used for videos. Parameters: Name Type Description Default filename Union[pathlib.Path, str] The filename of the image to upload. This field is used for MIME type detection. required twitter_credentials TwitterCredentials Credentials to use for authentication with Twitter. required file Optional[IOBase] A file object to upload. If not specified, this task will attempt to locate and upload a file with the name specified in filename. None chunked bool Whether or not to use chunked media upload. Videos use chunked upload regardless of this parameter. False kwargs dict Additional keyword arguments to pass to media_upload . {} Returns: Type Description int The media ID. Examples: Uploads an image from a file path to Twitter. from prefect import flow from prefect_twitter import TwitterCredentials from prefect_twitter.media import media_upload @flow def example_media_upload_flow (): twitter_credentials = TwitterCredentials ( consumer_key = \"consumer_key\" , consumer_secret = \"consumer_secret\" , access_token = \"access_token\" , access_token_secret = \"access_token_secret\" ) media_id = media_upload ( \"/path/to/prefection.jpg\" , twitter_credentials ) return media_id example_media_upload_flow () Source code in prefect_twitter/media.py @task async def media_upload ( filename : Union [ Path , str ], twitter_credentials : \"TwitterCredentials\" , file : Optional [ \"IOBase\" ] = None , chunked : bool = False , ** kwargs : dict ) -> int : \"\"\" Uploads media to Twitter. Chunked media upload is automatically used for videos. Args: filename: The filename of the image to upload. This field is used for MIME type detection. twitter_credentials: Credentials to use for authentication with Twitter. file: A file object to upload. If not specified, this task will attempt to locate and upload a file with the name specified in filename. chunked: Whether or not to use chunked media upload. Videos use chunked upload regardless of this parameter. kwargs: Additional keyword arguments to pass to [media_upload](https://docs.tweepy.org/en/stable/api.html#tweepy.API.media_upload). Returns: The media ID. Example: Uploads an image from a file path to Twitter. ```python from prefect import flow from prefect_twitter import TwitterCredentials from prefect_twitter.media import media_upload @flow def example_media_upload_flow(): twitter_credentials = TwitterCredentials( consumer_key=\"consumer_key\", consumer_secret=\"consumer_secret\", access_token=\"access_token\", access_token_secret=\"access_token_secret\" ) media_id = media_upload(\"/path/to/prefection.jpg\", twitter_credentials) return media_id example_media_upload_flow() ``` \"\"\" # noqa logger = get_run_logger () logger . info ( \"Uploading media named %s \" , filename ) api = twitter_credentials . get_api () partial_media = partial ( api . media_upload , filename = filename , file = file , chunked = chunked , ** kwargs ) media = await to_thread . run_sync ( partial_media ) media_id = media . media_id return media_id","title":"Media"},{"location":"media/#prefect_twitter.media","text":"This is a module for interacting with Twitter media","title":"media"},{"location":"media/#prefect_twitter.media.get_media_upload_status","text":"Check on the progress of a chunked media upload. If the upload has succeeded, it's safe to create a Tweet with this media_id. Parameters: Name Type Description Default media_id int The ID of the media to check. required twitter_credentials TwitterCredentials Credentials to use for authentication with Twitter. required Returns: Type Description Media The Media object. Examples: Tweets an update with just text. from prefect import flow from prefect_twitter import TwitterCredentials from prefect_twitter.media import get_media_upload_status @flow def example_get_media_upload_status_flow (): twitter_credentials = TwitterCredentials ( consumer_key = consumer_key , consumer_secret = consumer_secret , access_token = access_token , access_token_secret = access_token_secret ) media_id = 1443668738906234883 media = get_media_upload_status ( media_id , twitter_credentials ) return media example_get_media_upload_status_flow () Source code in prefect_twitter/media.py @task async def get_media_upload_status ( media_id : int , twitter_credentials : \"TwitterCredentials\" ) -> \"Media\" : \"\"\" Check on the progress of a chunked media upload. If the upload has succeeded, it's safe to create a Tweet with this media_id. Args: media_id: The ID of the media to check. twitter_credentials: Credentials to use for authentication with Twitter. Returns: The Media object. Example: Tweets an update with just text. ```python from prefect import flow from prefect_twitter import TwitterCredentials from prefect_twitter.media import get_media_upload_status @flow def example_get_media_upload_status_flow(): twitter_credentials = TwitterCredentials( consumer_key=consumer_key, consumer_secret=consumer_secret, access_token=access_token, access_token_secret=access_token_secret ) media_id = 1443668738906234883 media = get_media_upload_status(media_id, twitter_credentials) return media example_get_media_upload_status_flow() ``` \"\"\" api = twitter_credentials . get_api () partial_get = partial ( api . get_media_upload_status , media_id ) media = await to_thread . run_sync ( partial_get ) return media","title":"get_media_upload_status()"},{"location":"media/#prefect_twitter.media.media_upload","text":"Uploads media to Twitter. Chunked media upload is automatically used for videos. Parameters: Name Type Description Default filename Union[pathlib.Path, str] The filename of the image to upload. This field is used for MIME type detection. required twitter_credentials TwitterCredentials Credentials to use for authentication with Twitter. required file Optional[IOBase] A file object to upload. If not specified, this task will attempt to locate and upload a file with the name specified in filename. None chunked bool Whether or not to use chunked media upload. Videos use chunked upload regardless of this parameter. False kwargs dict Additional keyword arguments to pass to media_upload . {} Returns: Type Description int The media ID. Examples: Uploads an image from a file path to Twitter. from prefect import flow from prefect_twitter import TwitterCredentials from prefect_twitter.media import media_upload @flow def example_media_upload_flow (): twitter_credentials = TwitterCredentials ( consumer_key = \"consumer_key\" , consumer_secret = \"consumer_secret\" , access_token = \"access_token\" , access_token_secret = \"access_token_secret\" ) media_id = media_upload ( \"/path/to/prefection.jpg\" , twitter_credentials ) return media_id example_media_upload_flow () Source code in prefect_twitter/media.py @task async def media_upload ( filename : Union [ Path , str ], twitter_credentials : \"TwitterCredentials\" , file : Optional [ \"IOBase\" ] = None , chunked : bool = False , ** kwargs : dict ) -> int : \"\"\" Uploads media to Twitter. Chunked media upload is automatically used for videos. Args: filename: The filename of the image to upload. This field is used for MIME type detection. twitter_credentials: Credentials to use for authentication with Twitter. file: A file object to upload. If not specified, this task will attempt to locate and upload a file with the name specified in filename. chunked: Whether or not to use chunked media upload. Videos use chunked upload regardless of this parameter. kwargs: Additional keyword arguments to pass to [media_upload](https://docs.tweepy.org/en/stable/api.html#tweepy.API.media_upload). Returns: The media ID. Example: Uploads an image from a file path to Twitter. ```python from prefect import flow from prefect_twitter import TwitterCredentials from prefect_twitter.media import media_upload @flow def example_media_upload_flow(): twitter_credentials = TwitterCredentials( consumer_key=\"consumer_key\", consumer_secret=\"consumer_secret\", access_token=\"access_token\", access_token_secret=\"access_token_secret\" ) media_id = media_upload(\"/path/to/prefection.jpg\", twitter_credentials) return media_id example_media_upload_flow() ``` \"\"\" # noqa logger = get_run_logger () logger . info ( \"Uploading media named %s \" , filename ) api = twitter_credentials . get_api () partial_media = partial ( api . media_upload , filename = filename , file = file , chunked = chunked , ** kwargs ) media = await to_thread . run_sync ( partial_media ) media_id = media . media_id return media_id","title":"media_upload()"},{"location":"tweets/","text":"prefect_twitter.tweets This is a module for interacting with Twitter tweets get_status async Returns a single status specified by the ID parameter. Parameters: Name Type Description Default status_id int The ID of the status. required twitter_credentials TwitterCredentials Credentials to use for authentication with Twitter. required kwargs dict Additional keyword arguments to pass to get_status . {} Returns: Type Description Status The Status object. Examples: Tweets an update with just text. from prefect import flow from prefect_twitter import TwitterCredentials from prefect_twitter.tweets import get_status @flow def example_get_status_flow (): twitter_credentials = TwitterCredentials ( consumer_key = consumer_key , consumer_secret = consumer_secret , access_token = access_token , access_token_secret = access_token_secret ) status_id = 1504591031626571777 status = get_status ( status_id , twitter_credentials ) return status example_get_status_flow () Source code in prefect_twitter/tweets.py @task async def get_status ( status_id : int , twitter_credentials : \"TwitterCredentials\" , ** kwargs : dict ) -> \"Status\" : \"\"\" Returns a single status specified by the ID parameter. Args: status_id: The ID of the status. twitter_credentials: Credentials to use for authentication with Twitter. kwargs: Additional keyword arguments to pass to [get_status](https://docs.tweepy.org/en/stable/api.html#tweepy.API.get_status). Returns: The Status object. Example: Tweets an update with just text. ```python from prefect import flow from prefect_twitter import TwitterCredentials from prefect_twitter.tweets import get_status @flow def example_get_status_flow(): twitter_credentials = TwitterCredentials( consumer_key=consumer_key, consumer_secret=consumer_secret, access_token=access_token, access_token_secret=access_token_secret ) status_id = 1504591031626571777 status = get_status(status_id, twitter_credentials) return status example_get_status_flow() ``` \"\"\" api = twitter_credentials . get_api () partial_get = partial ( api . get_status , status_id , ** kwargs ) status = await to_thread . run_sync ( partial_get ) return status update_status async Updates the authenticating user's current status, also known as Tweeting. Parameters: Name Type Description Default twitter_credentials TwitterCredentials Credentials to use for authentication with Twitter. required status Optional[str] Text of the Tweet being created. This field is required if media_ids is not present. None media_ids Optional[List[Union[int, str]]] A list of Media IDs being attached to the Tweet. None kwargs dict Additional keyword arguments to pass to update_status . {} Returns: Type Description int The status ID. Examples: Tweets an update with just text. from prefect import flow from prefect_twitter import TwitterCredentials from prefect_twitter.tweets import update_status @flow def example_update_status_flow (): twitter_credentials = TwitterCredentials ( consumer_key = \"consumer_key\" , consumer_secret = \"consumer_secret\" , access_token = \"access_token\" , access_token_secret = \"access_token_secret\" ) status_id = update_status ( twitter_credentials , status = \"A Prefect Tweet!\" ) return status_id example_update_status_flow () Tweets an update with text and a media. from prefect import flow from prefect_twitter import TwitterCredentials from prefect_twitter.tweets import update_status from prefect_twitter.media import media_upload @flow def example_update_status_flow (): twitter_credentials = TwitterCredentials ( consumer_key = \"consumer_key\" , consumer_secret = \"consumer_secret\" , access_token = \"access_token\" , access_token_secret = \"access_token_secret\" ) media_id = media_upload ( \"prefect.png\" , twitter_credentials ) status_id = update_status ( twitter_credentials , status = \"Prefect!\" , media_ids = [ media_id ] ) return status_id example_update_status_flow () Source code in prefect_twitter/tweets.py @task async def update_status ( twitter_credentials : \"TwitterCredentials\" , status : Optional [ str ] = None , media_ids : Optional [ List [ Union [ int , str ]]] = None , ** kwargs : dict ) -> int : \"\"\" Updates the authenticating user's current status, also known as Tweeting. Args: twitter_credentials: Credentials to use for authentication with Twitter. status: Text of the Tweet being created. This field is required if media_ids is not present. media_ids: A list of Media IDs being attached to the Tweet. kwargs: Additional keyword arguments to pass to [update_status](https://docs.tweepy.org/en/stable/api.html#tweepy.API.update_status). Returns: The status ID. Example: Tweets an update with just text. ```python from prefect import flow from prefect_twitter import TwitterCredentials from prefect_twitter.tweets import update_status @flow def example_update_status_flow(): twitter_credentials = TwitterCredentials( consumer_key=\"consumer_key\", consumer_secret=\"consumer_secret\", access_token=\"access_token\", access_token_secret=\"access_token_secret\" ) status_id = update_status(twitter_credentials, status=\"A Prefect Tweet!\") return status_id example_update_status_flow() ``` Tweets an update with text and a media. ```python from prefect import flow from prefect_twitter import TwitterCredentials from prefect_twitter.tweets import update_status from prefect_twitter.media import media_upload @flow def example_update_status_flow(): twitter_credentials = TwitterCredentials( consumer_key=\"consumer_key\", consumer_secret=\"consumer_secret\", access_token=\"access_token\", access_token_secret=\"access_token_secret\" ) media_id = media_upload(\"prefect.png\", twitter_credentials) status_id = update_status( twitter_credentials, status=\"Prefect!\", media_ids=[media_id] ) return status_id example_update_status_flow() ``` \"\"\" # noqa num_media = len ( media_ids ) if media_ids else 0 logger = get_run_logger () logger . info ( \"Updating status with %s media.\" , num_media ) if not status and not media_ids : # `not` checks for None and [] raise ValueError ( \"One of text or media_ids must be provided\" ) api = twitter_credentials . get_api () partial_update = partial ( api . update_status , status = status , media_ids = media_ids , ** kwargs ) status = await to_thread . run_sync ( partial_update ) return status . id","title":"Tweets"},{"location":"tweets/#prefect_twitter.tweets","text":"This is a module for interacting with Twitter tweets","title":"tweets"},{"location":"tweets/#prefect_twitter.tweets.get_status","text":"Returns a single status specified by the ID parameter. Parameters: Name Type Description Default status_id int The ID of the status. required twitter_credentials TwitterCredentials Credentials to use for authentication with Twitter. required kwargs dict Additional keyword arguments to pass to get_status . {} Returns: Type Description Status The Status object. Examples: Tweets an update with just text. from prefect import flow from prefect_twitter import TwitterCredentials from prefect_twitter.tweets import get_status @flow def example_get_status_flow (): twitter_credentials = TwitterCredentials ( consumer_key = consumer_key , consumer_secret = consumer_secret , access_token = access_token , access_token_secret = access_token_secret ) status_id = 1504591031626571777 status = get_status ( status_id , twitter_credentials ) return status example_get_status_flow () Source code in prefect_twitter/tweets.py @task async def get_status ( status_id : int , twitter_credentials : \"TwitterCredentials\" , ** kwargs : dict ) -> \"Status\" : \"\"\" Returns a single status specified by the ID parameter. Args: status_id: The ID of the status. twitter_credentials: Credentials to use for authentication with Twitter. kwargs: Additional keyword arguments to pass to [get_status](https://docs.tweepy.org/en/stable/api.html#tweepy.API.get_status). Returns: The Status object. Example: Tweets an update with just text. ```python from prefect import flow from prefect_twitter import TwitterCredentials from prefect_twitter.tweets import get_status @flow def example_get_status_flow(): twitter_credentials = TwitterCredentials( consumer_key=consumer_key, consumer_secret=consumer_secret, access_token=access_token, access_token_secret=access_token_secret ) status_id = 1504591031626571777 status = get_status(status_id, twitter_credentials) return status example_get_status_flow() ``` \"\"\" api = twitter_credentials . get_api () partial_get = partial ( api . get_status , status_id , ** kwargs ) status = await to_thread . run_sync ( partial_get ) return status","title":"get_status()"},{"location":"tweets/#prefect_twitter.tweets.update_status","text":"Updates the authenticating user's current status, also known as Tweeting. Parameters: Name Type Description Default twitter_credentials TwitterCredentials Credentials to use for authentication with Twitter. required status Optional[str] Text of the Tweet being created. This field is required if media_ids is not present. None media_ids Optional[List[Union[int, str]]] A list of Media IDs being attached to the Tweet. None kwargs dict Additional keyword arguments to pass to update_status . {} Returns: Type Description int The status ID. Examples: Tweets an update with just text. from prefect import flow from prefect_twitter import TwitterCredentials from prefect_twitter.tweets import update_status @flow def example_update_status_flow (): twitter_credentials = TwitterCredentials ( consumer_key = \"consumer_key\" , consumer_secret = \"consumer_secret\" , access_token = \"access_token\" , access_token_secret = \"access_token_secret\" ) status_id = update_status ( twitter_credentials , status = \"A Prefect Tweet!\" ) return status_id example_update_status_flow () Tweets an update with text and a media. from prefect import flow from prefect_twitter import TwitterCredentials from prefect_twitter.tweets import update_status from prefect_twitter.media import media_upload @flow def example_update_status_flow (): twitter_credentials = TwitterCredentials ( consumer_key = \"consumer_key\" , consumer_secret = \"consumer_secret\" , access_token = \"access_token\" , access_token_secret = \"access_token_secret\" ) media_id = media_upload ( \"prefect.png\" , twitter_credentials ) status_id = update_status ( twitter_credentials , status = \"Prefect!\" , media_ids = [ media_id ] ) return status_id example_update_status_flow () Source code in prefect_twitter/tweets.py @task async def update_status ( twitter_credentials : \"TwitterCredentials\" , status : Optional [ str ] = None , media_ids : Optional [ List [ Union [ int , str ]]] = None , ** kwargs : dict ) -> int : \"\"\" Updates the authenticating user's current status, also known as Tweeting. Args: twitter_credentials: Credentials to use for authentication with Twitter. status: Text of the Tweet being created. This field is required if media_ids is not present. media_ids: A list of Media IDs being attached to the Tweet. kwargs: Additional keyword arguments to pass to [update_status](https://docs.tweepy.org/en/stable/api.html#tweepy.API.update_status). Returns: The status ID. Example: Tweets an update with just text. ```python from prefect import flow from prefect_twitter import TwitterCredentials from prefect_twitter.tweets import update_status @flow def example_update_status_flow(): twitter_credentials = TwitterCredentials( consumer_key=\"consumer_key\", consumer_secret=\"consumer_secret\", access_token=\"access_token\", access_token_secret=\"access_token_secret\" ) status_id = update_status(twitter_credentials, status=\"A Prefect Tweet!\") return status_id example_update_status_flow() ``` Tweets an update with text and a media. ```python from prefect import flow from prefect_twitter import TwitterCredentials from prefect_twitter.tweets import update_status from prefect_twitter.media import media_upload @flow def example_update_status_flow(): twitter_credentials = TwitterCredentials( consumer_key=\"consumer_key\", consumer_secret=\"consumer_secret\", access_token=\"access_token\", access_token_secret=\"access_token_secret\" ) media_id = media_upload(\"prefect.png\", twitter_credentials) status_id = update_status( twitter_credentials, status=\"Prefect!\", media_ids=[media_id] ) return status_id example_update_status_flow() ``` \"\"\" # noqa num_media = len ( media_ids ) if media_ids else 0 logger = get_run_logger () logger . info ( \"Updating status with %s media.\" , num_media ) if not status and not media_ids : # `not` checks for None and [] raise ValueError ( \"One of text or media_ids must be provided\" ) api = twitter_credentials . get_api () partial_update = partial ( api . update_status , status = status , media_ids = media_ids , ** kwargs ) status = await to_thread . run_sync ( partial_update ) return status . id","title":"update_status()"}]}